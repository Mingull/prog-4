"use strict";var p=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var b=(e,s,t,r)=>{if(s&&typeof s=="object"||typeof s=="function")for(let a of g(s))!I.call(e,a)&&a!==t&&i(e,a,{get:()=>s[a],enumerable:!(r=f(s,a))||r.enumerable});return e};var l=(e,s,t)=>(t=e!=null?p(_(e)):{},b(s||!e||!e.__esModule?i(t,"default",{value:e,enumerable:!0}):t,e));var h=l(require("dotenv"),1),u=l(require("express"),1);var m=require("express");var o={_data:[{id:0,firstName:"Hendrik",lastName:"van Dam",emailAddress:"hvd@server.nl"},{id:1,firstName:"Marieke",lastName:"Jansen",emailAddress:"m@server.nl"}],_index:2,getAll(e){setTimeout(()=>{e({err:null,data:this._data})},1500)},getById(e,s){setTimeout(()=>{e<0||e>=this._data.length?s({err:{message:`User with id '${e}' could not be found`},data:null}):s({err:null,data:this._data[e]})},1500)},add(e,s){setTimeout(()=>{let t=this._data.some(r=>r.emailAddress===e.emailAddress);if(console.log({emailExists:t}),t)s({err:{message:`User with email '${e.emailAddress}' already exists`},data:null});else{let r={id:this._index++,...e};this._data.push(r),s({err:null,data:r})}},1500)},update(e,s,t){setTimeout(()=>{if(e<0||e>=this._data.length||typeof e!="number")t({err:{message:"Invalid id provided. Id must be a number and must be within the range of the current users."},data:null});else{let r=this._data[e];if(!r)return t({err:{message:`User with id '${e}' could not be found`},data:null});console.log({user:r});let a={...r,...s};this._data[e]=a,t({err:null,data:a})}},1500)},delete(e,s){setTimeout(()=>{if(e<0||e>=this._data.length)s({err:{message:"Invalid id provided. Id must be a number and must be within the range of the current users."},data:null});else{let t=this._data[e];if(!t)return s({err:{message:`User with id '${e}' could not be found`},data:null});this._data=this._data.filter(r=>r.id!==e),this._index=this._data.length,s({err:null,data:t})}},1500)}};var n=(0,m.Router)();n.get("/",async(e,s)=>{o.getAll(({data:t,err:r})=>{r?s.json({status:500,error:r}):s.json({status:200,result:t})})});n.post("/register",(e,s)=>{o.add(e.body,({data:t,err:r})=>{r?s.json({status:500,error:r}):s.json({status:200,result:t})})});n.get("/:userId",async(e,s)=>{o.getById(Number.parseInt(e.params.userId),({data:t,err:r})=>{t?s.json({status:200,result:{...t}}):s.json({status:404,error:r})})});n.put("/:userId",async(e,s)=>{o.update(Number.parseInt(e.params.userId),e.body,({data:t,err:r})=>{t?s.json({status:200,result:t}):s.json({status:404,error:r})})});n.delete("/:userId",async(e,s)=>{o.delete(Number.parseInt(e.params.userId),({data:t,err:r})=>{t?s.json({status:200,result:t}):s.json({status:404,error:r})})});h.default.config();var d=(0,u.default)();d.use(u.default.json());d.use(u.default.urlencoded({extended:!0}));d.get("/",(e,s)=>{s.json({status:200,result:"Hello World"})});d.use("/users",n);d.listen(process.env.PORT,()=>{console.log("Server is running on port "+process.env.PORT)});
